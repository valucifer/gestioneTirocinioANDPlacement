-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getRejectedTrainingMessage`(in primaryKey int)
BEGIN
select * from RejectedTrainingMessage where idRejectedTrainingMessage =primaryKey;
END




-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getStudentAttendence`()
BEGIN

SELECT * from StudentAttendence;


END



-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getStudentInformation`(in primaryKey int)
BEGIN
SELECT * from StudentInformation where idStudentInformation = primaryKey;
END


-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `requestStartTraining`(IN  studentSerialNumber VARCHAR(45), IN FK_IDstundetInformation int)
BEGIN
declare pathCVCheck int;
declare pathATCheck int;
set pathCVCheck = checkCVExistence(FK_IDstundetInformation);
set pathATCheck = checkATExistence(FK_IDstundetInformation);

if pathCVCheck = false 
	then SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CV not inserted.';
	else if pathATCheck =false
		THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Accademic Transcript not inserted.';
	else 
		insert into StudentAttendence values (studentSerialNumber, current_date,studentSerialNumber)  ;
		
	
END if;
END if;

END


-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `setRejectedTrainingMessage`(in message longtext,in serialNumber varchar(45))
BEGIN
insert into RejectedTrainingMessage values (message,serialNumber);
END


-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `storeUploadFile`(in CVPath Varchar(45), in ATPath Varchar(45), in serialNumber Varchar(45) )
BEGIN

DECLARE pathCV VARCHAR(45);
DECLARE pathAT VARCHAR(45);
DECLARE lastID int;
DECLARE foundSet INT default false;
DECLARE FK_studentInformation INT;
-- Cursore for check if the FK of student status is setting or not
DECLARE selectCur CURSOR FOR SELECT FK_idStudentInformation FROM Student WHERE Student.serialNumber = serialNumber AND FK_idStudentInformation != '' ;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET foundSet = true; 
open selectCur;
fetch selectCur into FK_studentInformation;
if foundSet=false
	then
	UPDATE StudentInformation Set CurriculumVitaePATH = CVPath , AccademicTranscriptPATH = ATPath WHERE idStudentInformation = FK_studentInformation;
else if foundSet=true
	then
	INSERT INTO StudentInformation  (CurriculumVitaePATH, AccademicTranscriptPATH) values (CVPath,ATPath);
	SET lastID = LAST_INSERT_ID();
	UPDATE Student SET FK_idStudentInformation = lastID WHERE Student.serialNumber = serialNumber;
END if;
END if;
 

END




-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertInnerTraining` ( in trainingDescription LONGTEXT, in FK_Professor INT, in FK_Department INT )
BEGIN

INSERT INTO OfferTraining (description, FK_Professor, FK_Department) values (trainingDescription, FK_Professor, FK_Department);

END



-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertOuterTrainingNoProfessor` ( in trainingDescription LONGTEXT, in FK_Department INT, in pkOrganization INT )
BEGIN
DECLARE professor INT;
DECLARE selectProfessor CURSOR FOR SELECT FK_Professor FROM Organization WHERE idOrganization = pkOrganization;
open selectProfessor;
fetch selectProfessor INTO professor;

INSERT INTO OfferTraining (description, FK_Organization, FK_Professor, FK_Department) values (trainingDescription, pkOrganization, professor, FK_Department);

END



-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertOuterTraining` ( in trainingDescription LONGTEXT, in pkOrganization INT, in pkProfessor INT, in pkDepartment INT)
BEGIN

INSERT INTO OfferTraining (description, FK_Organization, FK_Professor, FK_Department) values (trainingDescription, pkOrganization, pkProfessor, pkDepartment);

END

-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteOfferTraining` ( in pkTraining INT )
BEGIN

DELETE FROM OfferTraining WHERE idOfferTraining = pkTraining;

END



-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getOfferTrainings` ( in department INT )
BEGIN

IF department IS null
	then SELECT * FROM OfferTraining;
else SELECT * FROM OfferTraining WHERE FK_Department = department;

END IF;

END



-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$


CREATE DEFINER=`root`@`localhost` PROCEDURE `getStudentTrainingStatus` ( in pkStudentStatus INT )
BEGIN

SELECT * FROM StudentStatus WHERE idStudentStatus = pkStudentStatus;

END



-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertClaimTraining` ( in description LONGTEXT, in title VARCHAR(45), in professor INT, in PK_Organization INT )
BEGIN

DECLARE lastId INT;

if PK_Organization IS NULL
then INSERT INTO ClaimTraining (description, title, FK_ClaimStatus, FK_Professor) values (description, title, professor);
SET lastId = LAST_INSERT_ID();
SELECT * FROM ClaimTraining WHERE idClaimTraining = lastId;
else INSERT INTO ClaimTraining (description, title, FK_ClaimStatus, FK_Professor, FK_Organization) values (description, title, professor, PK_Organization);
SET lastId = LAST_INSERT_ID();
SELECT * FROM ClaimTraining WHERE idClaimTraining = lastId;
end if;
END


-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `modifyClaimStatus` ( in pkClaimTraining INT, in newStatus INT )
BEGIN

UPDATE ClaimStatus SET FK_ClaimStatus = newStatus WHERE idClaimTraining = pkClaimTraining;

END



-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteRejectedTrainingMessage` ( in pkRejectedTraining INT )
BEGIN

DELETE FROM RejectedTrainingMessage WHERE idRejectedTrainingMessage = pkRejectedTraining;

END


-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `insertOrganization` ( in account BIGINT, in naturalPerson INT, in professor INT, in companyName VARCHAR(45), in city VARCHAR(45), in phone VARCHAR(45), in email VARCHAR(45) )
BEGIN

INSERT INTO Organization ( companyName, city, address, phone, mail, FK_Account, FK_FisicPerson, FK_Professor) values (companyName, city, address, phone, email, account, naturalPerson, professor);

END




-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$


CREATE DEFINER=`root`@`localhost` PROCEDURE `getProfessorInformationByPrimaryKey` ( in pkProfessor INT )
BEGIN

SELECT * FROM Professor WHERE idProfessor = pkProfessor;

END




-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$


CREATE DEFINER=`root`@`localhost` PROCEDURE `getProfessorInformationByFK_Account` ( in pkFKAccount INT )
BEGIN

SELECT * FROM Professor WHERE FK_Account = pkFKAccount;

END


-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$


CREATE DEFINER=`root`@`localhost` PROCEDURE `getDepartment` ( in pkDepartment INT )
BEGIN

SELECT * FROM Department WHERE idDepartment = pkDepartment;

END

